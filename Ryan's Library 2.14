/*

Motors are assumed to be on 0 and 3

Current finished functions:
	motors(left_motor_speed, right_motor_speed);
	center_object(channel number, object_number);
    freeze_all();
	perpendicular_lineup(adjust_speed);




*/


#define threshold 2000




void motors(int left_motor_speed, int right_motor_speed)
{
    mav(0, left_motor_speed);
    mav(3, right_motor_speed);
}


void center_object(int object_number, int channel_number)
{
    camera_open_black();
    camera_update();
    int counter = 1;
    while(1)
    {
        camera_update();
        counter++;
        if(counter < 10)
        {
            //Do nothing, allowing the camera to update again
        }
        else if(counter > 999)
        {
            camera_close();
            camera_open_black();
            camera_update();
            counter = 1;
        }
        else if(get_object_count(channel_number) < 1)
        {
            off(0);
            off(3);
        }
        else if(get_object_center_x(channel_number, object_number)==80) //Is Object Centered?
        {
            freeze(0);
            freeze(3);
            break;
        }
        else if(get_object_center_x(channel_number, object_number)>80) //Is Object on Right?
        {
            motors((get_object_center_x(channel_number, object_number)-80)*10, -(get_object_center_x(channel_number, object_number)-80)*10);
        }
        else if(get_object_center_x(channel_number, object_number)<80) //Is Object on Left?
        {
            motors(-(80-get_object_center_x(channel_number, object_number))*10, (80-get_object_center_x(channel_number, object_number))*10);
        }
    }
    printf("Object Found.\n");
}



void freeze_all()
{
    freeze(0);
    freeze(1);
    freeze(2);
    freeze(3);
}




void perpendicular_lineup(int adjust_speed)
{
    int lineup_counter_function = 0;
    secondary:
    while(analog(1)>threshold&&analog(2)>threshold)//while both on black
    {
        mav(0, -adjust_speed);
        mav(3, -adjust_speed);
    }
    start: 
    freeze(0);
    freeze(3);
    if(analog(1) < threshold && analog(2) > threshold)//left sensor on white, right sensor on black
    {
        clear_motor_position_counter(0);
        clear_motor_position_counter(3);
        while(analog(1) < threshold)//left sensor on white
        {
            if(get_motor_position_counter(1) >2000)
            {
                motors(-700, -800);
                msleep(800);
                goto start;   
            }
            freeze(3);
            mav(0, adjust_speed);//left wheel forward
        }
        while(analog(2) > threshold)//right sensor on black
        {
            freeze(0);
            mav(3, -adjust_speed);//right wheel back
        }

    }
    else if(analog(2) < threshold && analog(1) > threshold)//right sensor on white, left sensor on black
    {
        clear_motor_position_counter(0);
        clear_motor_position_counter(3);
        while(analog(2) < threshold)//right sensor on white
        {
            if(get_motor_position_counter(3) >threshold)
            {
                motors(-800, -700);
                msleep(800);
                goto start;   
            }
            freeze(0);
            mav(3, adjust_speed);//right motor forward
        }
        while(analog(1) > threshold)//left sensor on black
        {
            freeze(3);
            mav(0, -adjust_speed);//left motor back
        }
    }

    else if(analog(1)>threshold&&analog(2)>threshold)//while both on black
    {
        mav(0, -adjust_speed);
        mav(3, -adjust_speed);
    }
    else
    {
        clear_motor_position_counter(0);
        clear_motor_position_counter(3);
        while(analog(1) <threshold && analog(2)<threshold)//both on white
        {
            if(get_motor_position_counter(0) >2000 && get_motor_position_counter(3) >2000)
            {
                motors(-800, -800);
                msleep(800);
                goto start;   
            }
            mav(0, adjust_speed);//left motor forward
            mav(3, adjust_speed);//right motor forward
        }
        goto start;
    }
    if (lineup_counter_function == 0)
    {
        lineup_counter_function ++;
        adjust_speed = 300;
        goto secondary;
    }
    freeze_all();
}
